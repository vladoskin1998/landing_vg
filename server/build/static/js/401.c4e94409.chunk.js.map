{"version":3,"file":"static/js/401.c4e94409.chunk.js","mappings":"mIAEMA,EAAM,CACR,CAAEC,IAAK,SAAUC,MAAO,UAAWC,SAAU,KAC7C,CAAEF,IAAK,SAAUC,MAAO,oBAAqBC,SAAU,KACvD,CAAEF,IAAK,SAAUC,MAAO,uCAAwCC,SAAU,KAC1E,CAAEF,IAAK,SAAUC,MAAO,qCAAsCC,SAAU,MAQ5E,UAJc,WACV,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,GAAG,QAAOC,UAACF,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CAACP,IAAKA,EAAKQ,KAAM,gBACxD,C,qECVaC,EAAW,SAAIT,EAAUU,GAClC,GAAmB,IAAfV,EAAIW,OAAc,MAAO,EAAAC,EAAAA,EAAAA,GAAKZ,IAClC,GAAe,OAAXU,EAAiB,OAAOV,EAAIa,KAAI,SAAAC,GAAC,MAAI,CAACA,EAAE,IAI5C,IAFA,IAAIC,EAAsB,GAEjBC,EAAI,EAAGA,EAAIhB,EAAIW,OAAQK,GAAQ,EACpCD,EAAQE,MAAIL,EAAAA,EAAAA,GACLZ,EAAIkB,MAAMF,EAAGA,EAAI,GAAKhB,EAAIW,OAASX,EAAIW,OAASK,EAAI,KAQ/D,OAJ2C,IAAvCD,EAAQA,EAAQJ,OAAS,GAAGA,QAC5BI,EAAQA,EAAQJ,OAAS,GAAGQ,QAAQJ,EAAQA,EAAQJ,OAAS,GAAGS,OAG7DL,CACX,C,4GCFaR,EAAc,SAAHc,GAMjB,IALHrB,EAAGqB,EAAHrB,IACAQ,EAAIa,EAAJb,KAMMc,GAAWC,EAAAA,EAAAA,MACXC,EApBQ,SAAChB,GACf,OAAQA,GACJ,IAAK,aACD,MAAO,QACX,IAAK,aACD,MAAO,QACX,QACI,MAAO,YAEnB,CAWkBiB,CAAUjB,GAChBE,GAAWgB,EAAAA,EAAAA,YAAWC,EAAAA,GAAtBjB,OAER,OAAOkB,EAAAA,EAAAA,MAAA,OAAKC,UAAS,SAAAC,OAAWN,GAASnB,GAAImB,EAAM,GAAGO,cAAgBP,EAAMN,MAAM,GAAGZ,SAAA,EACjFF,EAAAA,EAAAA,KAAA,MAAIyB,UAAU,eAAcvB,SAAEkB,KAC9BpB,EAAAA,EAAAA,KAAA,OAAKyB,UAAU,cAAavB,UACvBG,EAAAA,EAAAA,GAAST,EAAKU,GAAQG,KAAI,SAACmB,EAAcC,GAAa,OACnD7B,EAAAA,EAAAA,KAAA,OACIyB,UAAS,mBAAAC,OAAqBE,EAAQrB,OAAM,KAAAmB,OAAIG,EAAQ,IAAM,EAAI,IAAM,IAAG,oBACpD3B,SAEtB0B,EAAQnB,KAAI,SAACqB,GAAI,OACdN,EAAAA,EAAAA,MAAA,OAAKO,MAAO,CAAEC,gBAAiBF,EAAKjC,KAAO4B,UAAU,cACjDQ,QAAS,kBAAMf,EAAS,IAADQ,OAAKtB,EAAI,KAAAsB,OAAII,EAAK/B,UAAW,EAACG,SAAA,EACrDF,EAAAA,EAAAA,KAAA,MAAIyB,UAAU,mBAAkBvB,SAAE4B,EAAKhC,SACvCE,EAAAA,EAAAA,KAAA,OAAKyB,UAAU,iBAAgBvB,UAC3BsB,EAAAA,EAAAA,MAAA,UAAQC,UAAU,qBAAoBvB,SAAA,CAAC,SAAKF,EAAAA,EAAAA,KAAA,SAAM,aAEpD,KAER,QAItB,C","sources":["components/main-page/media/photo.tsx","components/main-page/media/randList.ts","components/main-page/media/wraperMedia.tsx"],"sourcesContent":["import { WraperMedia } from \"./wraperMedia\"\n\nconst arr = [\n    { src: \"string\", label: \"Raw Art\", folderId: \"1\" },\n    { src: \"string\", label: \"Inshi. New circus\", folderId: \"2\" },\n    { src: \"string\", label: \"Festival Mondial du Cirque de Demain\", folderId: \"3\" },\n    { src: \"string\", label: \"Flic Flac The Modern Art of Circus\", folderId: \"4\" },\n\n]\n\nconst Photo = () => {\n    return <div id=\"Photo\"><WraperMedia arr={arr} link={\"photo-list\"}/></div>\n}\n\nexport default Photo","import { DeviceType } from \"../../../types/types-main\"\n\nexport const randList = <T>(arr: T[], device:DeviceType):Array<T[]> => {\n    if (arr.length === 1) return [[...arr]]\n    if (device !== 'pc') return arr.map(e => [e])\n\n    let tempArr: Array<T[]> = []\n\n    for (let i = 0; i < arr.length; i = i + 3) {\n        tempArr.push([\n            ...arr.slice(i, i + 3 >= arr.length ? arr.length : i + 3),\n        ])\n    }\n\n    if (tempArr[tempArr.length - 1].length === 1) {\n        tempArr[tempArr.length - 1].unshift(tempArr[tempArr.length - 2].pop() as T)\n    }\n\n    return tempArr\n}\n","import { randList } from \"./randList\"\nimport { useNavigate } from \"react-router-dom\"\nimport { MediaDataType } from \"../../../types/types-main\"\nimport { useContext } from \"react\"\nimport { AppContext } from \"../../../context/context\"\n\nconst makeTitle = (link: string): string => {\n    switch (link) {\n        case \"photo-list\":\n            return \"photo\"\n        case \"video-list\":\n            return \"video\"\n        default:\n            return 'not found'\n    }\n}\n\nexport const WraperMedia = <T extends MediaDataType,>({\n    arr,\n    link,\n}: {\n    arr: T[];\n    link: string;\n}) => {\n\n    const navigate = useNavigate()\n    const title = makeTitle(link)\n    const { device } = useContext(AppContext)\n\n    return <div className={`media ${title}`} id={title[0].toUpperCase() + title.slice(1)}>\n        <h4 className=\"title__links\">{title}</h4>\n        <div className=\"media__list\">\n            {randList(arr, device).map((arrItem: T[], index: number) => (\n                <div\n                    className={`media__itemline-${arrItem.length}-${index % 2 === 0 ? \"p\" : \"n\"\n                        } media__itemline`}\n                >\n                    {arrItem.map((item) => (\n                        <div style={{ backgroundImage: item.src }} className=\"media__item\"\n                            onClick={() => navigate(`/${link}/${item.folderId}`)}>\n                            <h5 className=\"media__item-text\">{item.label}</h5>\n                            <div className=\"media__item-bg\">\n                                <button className=\"media__item-bg_but\">view <br />all</button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    </div>\n}\n"],"names":["arr","src","label","folderId","_jsx","id","children","WraperMedia","link","randList","device","length","_toConsumableArray","map","e","tempArr","i","push","slice","unshift","pop","_ref","navigate","useNavigate","title","makeTitle","useContext","AppContext","_jsxs","className","concat","toUpperCase","arrItem","index","item","style","backgroundImage","onClick"],"sourceRoot":""}