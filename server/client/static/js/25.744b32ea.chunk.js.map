{"version":3,"file":"static/js/25.744b32ea.chunk.js","mappings":"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","sources":["svg/leftLine.tsx","svg/rightChevron.tsx","components/media-list/mediaNavTitle.tsx","components/media-list/wraperList.tsx","components/media-list/mediaList.tsx","utils/componentParams.ts","utils/randList.ts"],"sourcesContent":["export const LeftLine = () => {\n    return <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M7 12L2 6.5L7 1\" stroke=\"#141414\" strokeWidth=\"2.2\" />\n        <path d=\"M12.5 6.5L3 6.5\" stroke=\"#141414\" strokeWidth=\"2.2\" />\n    </svg>\n\n}","export const RightChevron = () => {\n    return <svg width=\"5\" height=\"9\" viewBox=\"0 0 5 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M1 1L4 4.5L0.999999 8\" stroke=\"#141414\" strokeWidth=\"1.5\"/>\n    </svg>\n\n}","import { LeftLine } from \"../../svg/leftLine\";\nimport { RightChevron } from \"../../svg/rightChevron\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const MediaNavTitle = ({ label, title }: { label: string, title: string }) => {\n    const navigate = useNavigate()\n    const exit = () => navigate(-1)\n    return <>\n        <h4 className=\"title__links\" onClick={exit}>\n            <div><LeftLine /></div>\n            back to {title}\n        </h4>\n        <div className=\"media__list-subtitle\">\n            <h5>{title}</h5>\n            <RightChevron />\n            <h5>{label}</h5>\n        </div>\n    </>\n}","import { useNavigate, useParams, useLocation } from \"react-router-dom\";\nimport { randList } from \"../../utils/randList\";\nimport { Outlet } from \"react-router-dom\";\nimport { useContext } from \"react\"\nimport { AppContext } from \"../../context/context\"\nimport { HREF } from \"../../utils/const\";\nimport { MediaTypeListFoo } from \"../../types/types-main\"\nimport { MediaNavTitle } from \"./mediaNavTitle\";\n\n\nexport const WraperList = <T extends { src: string },>({\n    arr,\n    label,\n    mediaTypesFoo\n}: {\n    arr: T[],\n    label: string,\n    mediaTypesFoo: MediaTypeListFoo\n}) => {\n\n    let { setId } = useParams();\n    const navigate = useNavigate()\n    const location = useLocation();\n\n    const { device } = useContext(AppContext)\n    const toSlick = (id: string | number) => navigate(`/${location.pathname.split('/')[1]}/${setId}/${mediaTypesFoo.title}/${id}`)\n\n\n    return <div className=\"media__list content\">\n        <Outlet />\n        <div className=\"media\">\n            <MediaNavTitle label={label} title={mediaTypesFoo.title} />\n            <div className=\"media__list\">\n                {randList(arr, device).map((arrItem: T[], index: number) => (\n                    <div\n                        className={`media__itemline-${arrItem.length}-${index % 2 === 0 ? \"p\" : \"n\"\n                            } media__itemline`}\n                        key={'media-list-wraper' + index}    \n                    >\n                        {arrItem.map((item, id) => (\n                            <div\n                                key={'media-list-wraper' + index}    \n                                style={{ backgroundImage: `url(${HREF}uploads/${item.src})` }}\n                                className=\"media__item about__born-image\"\n                            >\n                                <div className=\"media__item-bg\" onClick={() => toSlick(id)}>\n                                    <button className=\"media__item-bg_but\"> {mediaTypesFoo.buttonTitle}</button>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n\n    </div >\n}\n\nexport default WraperList","import { WraperList } from \"./wraperList\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { useContext, useMemo } from \"react\"\nimport { AppContext } from \"../../context/context\"\nimport { MediaEnumFile } from \"../../types/types-main\"\nimport { wraperMediaListParams } from \"../../utils/componentParams\";\nimport '../../style/media-list/media-list.scss';\n\nexport const MediaList = () => {\n\n    const location = useLocation();\n    const { video, image } = useContext(AppContext)\n    const { setId } = useParams()\n\n    const mediaTypesFoo = wraperMediaListParams(location.pathname.split('/')[1]);\n\n    const arr = useMemo(() => (mediaTypesFoo.tag === MediaEnumFile.PHOTO ? image : video)\n        .find(it => setId === it.folderId)\n        ?.src.map(it => ({ src: it, photoId: it })) || [], [video, image, mediaTypesFoo])\n\n    const label = video.find(it => setId === it.folderId)?.label || ''\n\n    return <WraperList arr={arr} label={label} mediaTypesFoo={mediaTypesFoo} />\n}\n\nexport default MediaList","import { MediaEnumFile, MediaTypeFile, FormatMedia } from \"../types/types-main\"\n\nexport const wraperMediaParams = (link: string) => {\n    switch (link) {\n        case \"photo-list\":\n            return { title: \"photo\", tag: MediaEnumFile.PHOTO }\n        case \"video-list\":\n            return { title: \"video\", tag: MediaEnumFile.VIDEO }\n        default:\n            return { title: \"photo\", tag: MediaEnumFile.PHOTO }\n    }\n}\n\nexport const wraperMediaListParams = (\n    key: string\n): { title: string; buttonTitle: string; tag: MediaTypeFile } => {\n    switch (key) {\n        case \"photo-list\":\n            return {\n                title: \"photo\",\n                buttonTitle: \"open full\",\n                tag: MediaEnumFile.PHOTO,\n            }\n        case \"video-list\":\n            return {\n                title: \"video\",\n                buttonTitle: \"play\",\n                tag: MediaEnumFile.VIDEO,\n            }\n        default:\n            return {\n                title: \"not found\",\n                buttonTitle: \"not found\",\n                tag: MediaEnumFile.PHOTO,\n            }\n    }\n}\n\nexport const wraperMediaListSlick = (key: string): { tag: MediaTypeFile } => {\n    switch (key) {\n        case \"photo\":\n            return { tag: MediaEnumFile.PHOTO }\n        case \"video\":\n            return { tag: MediaEnumFile.VIDEO }\n        default:\n            return { tag: MediaEnumFile.PHOTO }\n    }\n}\n\n\nexport const dataUpload = (key: string): { format: FormatMedia, tag: MediaEnumFile.PHOTO | MediaEnumFile.VIDEO } => {\n    switch (key) {\n        case \"folder-photo\":\n            return { format: FormatMedia.PHOTO, tag: MediaEnumFile.PHOTO }\n        case \"folder-video\":\n            return { format: FormatMedia.VIDEO, tag: MediaEnumFile.VIDEO }\n        default:\n            return { format: FormatMedia.PHOTO, tag: MediaEnumFile.PHOTO }\n    }\n}\n","import { DeviceType } from \"./../types/types-main\"\n\nexport const randList = <T>(arr: T[], device:DeviceType):Array<T[]> => {\n\n    // console.log(\"randList-->\",arr.length);\n    \n    if (arr.length === 0 ) return []\n    if (arr.length === 1 ) return [[...arr]]\n    if (device !== 'pc') return arr.map(e => [e])\n\n    let tempArr: Array<T[]> = []\n\n    for (let i = 0; i < arr.length; i = i + 3) {\n        tempArr.push([\n            ...arr.slice(i, i + 3 >= arr.length ? arr.length : i + 3),\n        ])\n    }\n\n    if (tempArr[tempArr.length - 1].length === 1) {\n        tempArr[tempArr.length - 1].unshift(tempArr[tempArr.length - 2].pop() as T)\n    }\n\n    return tempArr\n}\n"],"names":["LeftLine","_jsxs","width","height","viewBox","fill","xmlns","children","_jsx","d","stroke","strokeWidth","RightChevron","MediaNavTitle","_ref","label","title","navigate","useNavigate","_Fragment","className","onClick","WraperList","arr","mediaTypesFoo","setId","useParams","location","useLocation","device","useContext","AppContext","Outlet","randList","map","arrItem","index","concat","length","item","id","style","backgroundImage","HREF","src","pathname","split","toSlick","buttonTitle","MediaList","_video$find","_useContext","video","image","wraperMediaListParams","useMemo","_find","tag","MediaEnumFile","find","it","folderId","photoId","key","wraperMediaListSlick","dataUpload","format","FormatMedia","_toConsumableArray","e","tempArr","i","push","slice","unshift","pop"],"sourceRoot":""}