{"version":3,"file":"static/js/868.2174e07c.chunk.js","mappings":"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","sources":["svg/leftLine.tsx","components/media-list/mediaNavTitle.tsx","components/media-list/wraperList.tsx","components/media-list/mediaList.tsx","utils/componentParams.ts","utils/randList.ts"],"sourcesContent":["export const LeftLine = () => <svg width='13' height='13' viewBox='0 0 13 13' fill='none' xmlns='http://www.w3.org/2000/svg'>\n\t<path d='M7 12L2 6.5L7 1' stroke='#141414' strokeWidth='2.2' />\n\t<path d='M12.5 6.5L3 6.5' stroke='#141414' strokeWidth='2.2' />\n</svg>;\n","import {LeftLine} from '../../svg/leftLine';\nimport {useNavigate} from 'react-router-dom';\n\nexport const MediaNavTitle = ({label, title}: {label: string; title: string}) => {\n\tconst navigate = useNavigate();\n\tconst exit = () => {\n\t\tnavigate(-1);\n\t};\n\n\treturn <>\n\t\t<h4 className='title__links' onClick={exit}>\n\t\t\t<div><LeftLine /></div>\n            back to {title}\n\t\t</h4>\n\t\t<div className='media__list-subtitle'>\n\t\t\t<h5>{title}</h5>\n\t\t\t<h5>{label}</h5>\n\t\t</div>\n\t</>;\n};\n","import {useNavigate, useParams, useLocation} from 'react-router-dom';\nimport {randList} from '../../utils/randList';\nimport {Outlet} from 'react-router-dom';\nimport {useContext} from 'react';\nimport {AppContext} from '../../context/context';\nimport {HREF} from '../../utils/const';\nimport {type MediaTypeListFoo} from '../../types/types-main';\nimport {MediaNavTitle} from './mediaNavTitle';\n\nexport const WraperList = <T extends {src: string}>({\n\tarr,\n\tlabel,\n\tmediaTypesFoo,\n}: {\n\tarr: T[];\n\tlabel: string;\n\tmediaTypesFoo: MediaTypeListFoo;\n}) => {\n\tconst {setId} = useParams();\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\n\tconst {device} = useContext(AppContext);\n\tconst toSlick = (id: string | number) => {\n\t\tnavigate(`/${location.pathname.split('/')[1]}/${setId}/${mediaTypesFoo.title}/${id}`);\n\t};\n\n\treturn <div className='media__list content'>\n\t\t<Outlet />\n\t\t<div className='media'>\n\t\t\t<MediaNavTitle label={label} title={mediaTypesFoo.title} />\n\t\t\t<div className='media__list'>\n\t\t\t\t{randList(arr, device).map((arrItem: T[], index: number) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`media__itemline-${arrItem.length}-${index % 2 === 0 ? 'p' : 'n'\n\t\t\t\t\t\t} media__itemline`}\n\t\t\t\t\t\tkey={'media-list-wraper' + index}\n\t\t\t\t\t>\n\t\t\t\t\t\t{arrItem.map((item, id) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={'media-list-wraper' + index}\n\t\t\t\t\t\t\t\tstyle={{backgroundImage: `url(${HREF}uploads/${item.src})`}}\n\t\t\t\t\t\t\t\tclassName='media__item main--image'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className='media__item-bg' onClick={() => {\n\t\t\t\t\t\t\t\t\ttoSlick(id+(index*3));\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t<button className='media__item-bg_but'> {mediaTypesFoo.buttonTitle}</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\n\t</div >;\n};\n\nexport default WraperList;\n","import {WraperList} from './wraperList';\nimport {useLocation, useParams} from 'react-router-dom';\nimport {useContext, useMemo} from 'react';\nimport {AppContext} from '../../context/context';\nimport {MediaEnumFile} from '../../types/types-main';\nimport {wraperMediaListParams} from '../../utils/componentParams';\nimport '../../style/media-list/media-list.scss';\n\nexport const MediaList = () => {\n\tconst location = useLocation();\n\tconst {video, image} = useContext(AppContext);\n\tconst {setId} = useParams();\n\n\tconst mediaTypesFoo = wraperMediaListParams(location.pathname.split('/')[1]);\n\n\tconst arr = useMemo(() => (mediaTypesFoo.tag === MediaEnumFile.PHOTO ? image : video)\n\t\t.find(it => setId === it.folderId)\n\t\t?.src.map(it => ({src: it, photoId: it})) || [], [video, image, mediaTypesFoo]);\n\n\tconst label = video.find(it => setId === it.folderId)?.label || '';\n\n\treturn <WraperList arr={arr} label={label} mediaTypesFoo={mediaTypesFoo} />;\n};\n\nexport default MediaList;\n","import {MediaEnumFile, type MediaTypeFile, FormatMedia} from '../types/types-main';\n\nexport const wraperMediaParams = (link: string) => {\n\tswitch (link) {\n\t\tcase 'photo-list':\n\t\t\treturn {title: 'photo', tag: MediaEnumFile.PHOTO};\n\t\tcase 'video-list':\n\t\t\treturn {title: 'video', tag: MediaEnumFile.VIDEO};\n\t\tdefault:\n\t\t\treturn {title: 'photo', tag: MediaEnumFile.PHOTO};\n\t}\n};\n\nexport const wraperMediaListParams = (\n\tkey: string,\n): {title: string; buttonTitle: string; tag: MediaTypeFile} => {\n\tswitch (key) {\n\t\tcase 'photo-list':\n\t\t\treturn {\n\t\t\t\ttitle: 'photo',\n\t\t\t\tbuttonTitle: 'open full',\n\t\t\t\ttag: MediaEnumFile.PHOTO,\n\t\t\t};\n\t\tcase 'video-list':\n\t\t\treturn {\n\t\t\t\ttitle: 'video',\n\t\t\t\tbuttonTitle: 'play',\n\t\t\t\ttag: MediaEnumFile.VIDEO,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\ttitle: 'not found',\n\t\t\t\tbuttonTitle: 'not found',\n\t\t\t\ttag: MediaEnumFile.PHOTO,\n\t\t\t};\n\t}\n};\n\nexport const wraperMediaListSlick = (key: string): {tag: MediaTypeFile} => {\n\tswitch (key) {\n\t\tcase 'photo':\n\t\t\treturn {tag: MediaEnumFile.PHOTO};\n\t\tcase 'video':\n\t\t\treturn {tag: MediaEnumFile.VIDEO};\n\t\tdefault:\n\t\t\treturn {tag: MediaEnumFile.PHOTO};\n\t}\n};\n\nexport const dataUpload = (key: string): {format: FormatMedia; tag: MediaEnumFile.PHOTO | MediaEnumFile.VIDEO} => {\n\tswitch (key) {\n\t\tcase 'folder-photo':\n\t\t\treturn {format: FormatMedia.PHOTO, tag: MediaEnumFile.PHOTO};\n\t\tcase 'folder-video':\n\t\t\treturn {format: FormatMedia.VIDEO, tag: MediaEnumFile.VIDEO};\n\t\tdefault:\n\t\t\treturn {format: FormatMedia.PHOTO, tag: MediaEnumFile.PHOTO};\n\t}\n};\n","import {type DeviceType} from './../types/types-main';\n\nexport const randList = <T>(arr: T[], device: DeviceType): T[][] => {\n\t// Console.log(\"randList-->\",arr.length);\n\n\tif (arr.length === 0) {\n\t\treturn [];\n\t}\n\n\tif (arr.length === 1) {\n\t\treturn [[...arr]];\n\t}\n\n\tif (device !== 'pc') {\n\t\treturn arr.map(e => [e]);\n\t}\n\n\tconst tempArr: T[][] = [];\n\n\tfor (let i = 0; i < arr.length; i += 3) {\n\t\ttempArr.push([\n\t\t\t...arr.slice(i, i + 3 >= arr.length ? arr.length : i + 3),\n\t\t]);\n\t}\n\n\tif (tempArr[tempArr.length - 1].length === 1) {\n\t\ttempArr[tempArr.length - 1].unshift(tempArr[tempArr.length - 2].pop() as T);\n\t}\n\n\treturn tempArr;\n};\n"],"names":["LeftLine","_jsxs","width","height","viewBox","fill","xmlns","children","_jsx","d","stroke","strokeWidth","MediaNavTitle","_ref","label","title","navigate","useNavigate","_Fragment","className","onClick","WraperList","arr","mediaTypesFoo","setId","useParams","location","useLocation","device","useContext","AppContext","Outlet","randList","map","arrItem","index","concat","length","item","id","style","backgroundImage","HREF","src","pathname","split","toSlick","buttonTitle","MediaList","_video$find","_useContext","video","image","wraperMediaListParams","useMemo","_find","tag","MediaEnumFile","find","it","folderId","photoId","key","wraperMediaListSlick","dataUpload","format","FormatMedia","_toConsumableArray","e","tempArr","i","push","slice","unshift","pop"],"sourceRoot":""}