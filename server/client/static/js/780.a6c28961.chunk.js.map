{"version":3,"file":"static/js/780.a6c28961.chunk.js","mappings":"gPAAaA,EAAW,WAAH,OAASC,EAAAA,EAAAA,MAAA,OAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAA4BC,SAAA,EAC3HC,EAAAA,EAAAA,KAAA,QAAMC,EAAE,kBAAkBC,OAAO,UAAUC,YAAY,SACvDH,EAAAA,EAAAA,KAAA,QAAMC,EAAE,kBAAkBC,OAAO,UAAUC,YAAY,UACjD,ECFMC,EAAe,WAAH,OAASJ,EAAAA,EAAAA,KAAA,OAAKN,MAAM,IAAIC,OAAO,IAAIC,QAAQ,UAAUC,KAAK,OAAOC,MAAM,6BAA4BC,UACxHC,EAAAA,EAAAA,KAAA,QAAMC,EAAE,wBAAwBC,OAAO,UAAU,eAAa,SAC5D,ECAOG,EAAgB,SAAHC,GAAwD,IAAnDC,EAAKD,EAALC,MAAOC,EAAKF,EAALE,MAC/BC,GAAWC,EAAAA,EAAAA,MAKjB,OAAOjB,EAAAA,EAAAA,MAAAkB,EAAAA,SAAA,CAAAZ,SAAA,EACNN,EAAAA,EAAAA,MAAA,MAAImB,UAAU,eAAeC,QALjB,WACZJ,GAAU,EACX,EAG4CV,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,OAAAD,UAAKC,EAAAA,EAAAA,KAACR,EAAQ,MAAS,WACLgB,MAEnBf,EAAAA,EAAAA,MAAA,OAAKmB,UAAU,uBAAsBb,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKS,KACLR,EAAAA,EAAAA,KAACI,EAAY,KACbJ,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,SAGR,ECXaO,EAAa,SAAHR,GAQhB,IAPNS,EAAGT,EAAHS,IACAR,EAAKD,EAALC,MACAS,EAAaV,EAAbU,cAMOC,GAASC,EAAAA,EAAAA,MAATD,MACDR,GAAWC,EAAAA,EAAAA,MACXS,GAAWC,EAAAA,EAAAA,MAEjBC,QAAQC,IAAI,uBAAqBP,GAGjC,IAAOQ,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAArBF,OAKP,OAAO9B,EAAAA,EAAAA,MAAA,OAAKmB,UAAU,sBAAqBb,SAAA,EAC1CC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAM,KACPjC,EAAAA,EAAAA,MAAA,OAAKmB,UAAU,QAAOb,SAAA,EACrBC,EAAAA,EAAAA,KAACK,EAAa,CAACE,MAAOA,EAAOC,MAAOQ,EAAcR,SAClDR,EAAAA,EAAAA,KAAA,OAAKY,UAAU,cAAab,UAC1B4B,EAAAA,EAAAA,GAASZ,EAAKQ,GAAQK,KAAI,SAACC,EAAcC,GAAa,OACtD9B,EAAAA,EAAAA,KAAA,OACCY,UAAS,mBAAAmB,OAAqBF,EAAQG,OAAM,KAAAD,OAAID,EAAQ,IAAM,EAAI,IAAM,IAAG,oBACxD/B,SAGlB8B,EAAQD,KAAI,SAACK,GAAI,OACjBjC,EAAAA,EAAAA,KAAA,OAECkC,MAAO,CAACC,gBAAgB,OAADJ,OAASK,EAAAA,GAAI,YAAAL,OAAWE,EAAKI,IAAIC,IAAG,MAC3D1B,UAAU,0BAAyBb,UAEnCC,EAAAA,EAAAA,KAAA,OAAKY,UAAU,iBAAiBC,QAAS,WArBhC,IAAC0B,IAsBDN,EAAKI,IAAIG,cArBxB/B,EAAS,IAADsB,OAAKZ,EAASsB,SAASC,MAAM,KAAK,GAAE,KAAAX,OAAId,EAAK,KAAAc,OAAIf,EAAcR,MAAK,KAAAuB,OAAIQ,GAsB1E,EAAExC,UACDN,EAAAA,EAAAA,MAAA,UAAQmB,UAAU,qBAAoBb,SAAA,CAAC,IAAEiB,EAAc2B,kBAPnD,oBAAsBb,EAStB,KAbF,oBAAsBA,EAetB,WAMX,E,oBCpDac,EAAY,WAAO,IAADC,EACxB1B,GAAWC,EAAAA,EAAAA,MACjB0B,GAAuBtB,EAAAA,EAAAA,YAAWC,EAAAA,GAA3BsB,EAAKD,EAALC,MAAOC,EAAKF,EAALE,MACP/B,GAASC,EAAAA,EAAAA,MAATD,MAEDD,GAAgBiC,EAAAA,EAAAA,IAAsB9B,EAASsB,SAASC,MAAM,KAAK,IAEnE3B,GAAMmC,EAAAA,EAAAA,UAAQ,eAAAC,EAAA,OACe,QADTA,GAACnC,EAAcoC,MAAQC,EAAAA,EAAAA,MAAsBL,EAAQD,GAC7EO,MAAK,SAAAC,GAAE,OAAItC,IAAUsC,EAAGC,QAAQ,WAAC,IAAAL,OAAA,EADTA,EAEvBd,IAAIT,KAAI,SAAC2B,GAAE,MAAM,CAAClB,IAAKkB,EAAIE,QAASF,EAAG,MAAM,EAAE,GAAE,CAACR,EAAOC,EAAOhC,IAG7DT,GAA+C,QAAvCsC,EAAAG,EAAMM,MAAK,SAAAC,GAAE,OAAItC,IAAUsC,EAAGC,QAAQ,WAAC,IAAAX,OAAA,EAAvCA,EAAyCtC,QAAS,GAEhE,OAAOP,EAAAA,EAAAA,KAACc,EAAU,CAACC,IAAKA,EAAKR,MAAOA,EAAOS,cAAeA,GAC3D,EAEA,G,sHCZaiC,EAAwB,SACpCS,GAEA,OAAQA,GACP,IAAK,aACJ,MAAO,CACNlD,MAAO,QACPmC,YAAa,YACbS,IAAKC,EAAAA,EAAAA,OAEP,IAAK,aACJ,MAAO,CACN7C,MAAO,QACPmC,YAAa,OACbS,IAAKC,EAAAA,EAAAA,OAEP,QACC,MAAO,CACN7C,MAAO,YACPmC,YAAa,YACbS,IAAKC,EAAAA,EAAAA,OAGT,EAEaM,EAAuB,SAACD,GACpC,OAAQA,GACP,IAAK,QAIL,QACC,MAAO,CAACN,IAAKC,EAAAA,EAAAA,OAHd,IAAK,QACJ,MAAO,CAACD,IAAKC,EAAAA,EAAAA,OAIhB,EAEaO,EAAa,SAACF,GAC1B,OAAQA,GACP,IAAK,eAIL,QACC,MAAO,CAACG,OAAQC,EAAAA,EAAAA,MAAmBV,IAAKC,EAAAA,EAAAA,OAHzC,IAAK,eACJ,MAAO,CAACQ,OAAQC,EAAAA,EAAAA,MAAmBV,IAAKC,EAAAA,EAAAA,OAI3C,C,qECxDa1B,EAAW,SAAIZ,EAAUQ,GAGrC,GAAmB,IAAfR,EAAIiB,OACP,MAAO,GAGR,GAAmB,IAAfjB,EAAIiB,OACP,MAAO,EAAA+B,EAAAA,EAAAA,GAAKhD,IAGb,GAAe,OAAXQ,EACH,OAAOR,EAAIa,KAAI,SAAAoC,GAAC,MAAI,CAACA,EAAE,IAKxB,IAFA,IAAMC,EAAiB,GAEdC,EAAI,EAAGA,EAAInD,EAAIiB,OAAQkC,GAAK,EACpCD,EAAQE,MAAIJ,EAAAA,EAAAA,GACRhD,EAAIqD,MAAMF,EAAGA,EAAI,GAAKnD,EAAIiB,OAASjB,EAAIiB,OAASkC,EAAI,KAQzD,OAJ2C,IAAvCD,EAAQA,EAAQjC,OAAS,GAAGA,QAC/BiC,EAAQA,EAAQjC,OAAS,GAAGqC,QAAQJ,EAAQA,EAAQjC,OAAS,GAAGsC,OAG1DL,CACR,C","sources":["svg/leftLine.tsx","svg/chevronRight.tsx","components/media-list/mediaNavTitle.tsx","components/media-list/wraperList.tsx","components/media-list/mediaList.tsx","utils/componentParams.ts","utils/randList.ts"],"sourcesContent":["export const LeftLine = () => <svg width='13' height='13' viewBox='0 0 13 13' fill='none' xmlns='http://www.w3.org/2000/svg'>\n\t<path d='M7 12L2 6.5L7 1' stroke='#141414' strokeWidth='2.2' />\n\t<path d='M12.5 6.5L3 6.5' stroke='#141414' strokeWidth='2.2' />\n</svg>;\n","\nexport const ChevronRight = () => <svg width=\"5\" height=\"9\" viewBox=\"0 0 5 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M1 1L4 4.5L0.999999 8\" stroke=\"#141414\" stroke-width=\"1.5\" />\n</svg>","import {LeftLine} from '../../svg/leftLine';\nimport {useNavigate} from 'react-router-dom';\nimport { ChevronRight } from '../../svg/chevronRight';\nexport const MediaNavTitle = ({label, title}: {label: string; title: string}) => {\n\tconst navigate = useNavigate();\n\tconst exit = () => {\n\t\tnavigate(-1);\n\t};\n\n\treturn <>\n\t\t<h4 className='title__links' onClick={exit}>\n\t\t\t<div><LeftLine /></div>\n            back to {title}\n\t\t</h4>\n\t\t<div className='media__list-subtitle'>\n\t\t\t<h5>{title}</h5>\n\t\t\t<ChevronRight />\n\t\t\t<h5>{label}</h5>\n\t\t</div>\n\t</>;\n};\n","import {useNavigate, useParams, useLocation} from 'react-router-dom';\nimport {randList} from '../../utils/randList';\nimport {Outlet} from 'react-router-dom';\nimport {useContext} from 'react';\nimport {AppContext} from '../../context/context';\nimport {HREF} from '../../utils/const';\nimport {type MediaTypeListFoo} from '../../types/types-main';\nimport {MediaNavTitle} from './mediaNavTitle';\n\nexport const WraperList = <T extends {src: {url:string, currentNumber:number}}>({\n\tarr,\n\tlabel,\n\tmediaTypesFoo,\n}: {\n\tarr: T[];\n\tlabel: string;\n\tmediaTypesFoo: MediaTypeListFoo;\n}) => {\n\tconst {setId} = useParams();\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\n\tconsole.log(\"arrWraperList--->\", arr);\n\t\n\n\tconst {device} = useContext(AppContext);\n\tconst toSlick = (id: string | number) => {\n\t\tnavigate(`/${location.pathname.split('/')[1]}/${setId}/${mediaTypesFoo.title}/${id}`);\n\t};\n\n\treturn <div className='media__list content'>\n\t\t<Outlet />\n\t\t<div className='media'>\n\t\t\t<MediaNavTitle label={label} title={mediaTypesFoo.title} />\n\t\t\t<div className='media__list'>\n\t\t\t\t{randList(arr, device).map((arrItem: T[], index: number) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`media__itemline-${arrItem.length}-${index % 2 === 0 ? 'p' : 'n'\n\t\t\t\t\t\t} media__itemline`}\n\t\t\t\t\t\tkey={'media-list-wraper' + index}\n\t\t\t\t\t>\n\t\t\t\t\t\t{arrItem.map((item) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={'media-list-wraper' + index}\n\t\t\t\t\t\t\t\tstyle={{backgroundImage: `url(${HREF}uploads/${item.src.url})`}}\n\t\t\t\t\t\t\t\tclassName='media__item main--image'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className='media__item-bg' onClick={() => {\n\t\t\t\t\t\t\t\t\ttoSlick(item.src.currentNumber);\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t<button className='media__item-bg_but'> {mediaTypesFoo.buttonTitle}</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\n\t</div >;\n};\n\nexport default WraperList;\n","import {WraperList} from './wraperList';\nimport {useLocation, useParams} from 'react-router-dom';\nimport {useContext, useMemo} from 'react';\nimport {AppContext} from '../../context/context';\nimport {MediaEnumFile} from '../../types/types-main';\nimport {wraperMediaListParams} from '../../utils/componentParams';\nimport '../../style/media-list/media-list.scss';\n\nexport const MediaList = () => {\n\tconst location = useLocation();\n\tconst {video, image} = useContext(AppContext);\n\tconst {setId} = useParams();\n\n\tconst mediaTypesFoo = wraperMediaListParams(location.pathname.split('/')[1]);\n\n\tconst arr = useMemo(() => (mediaTypesFoo.tag === MediaEnumFile.PHOTO ? image : video)\n\t\t.find(it => setId === it.folderId)\n\t\t?.src.map((it) => ({src: it, photoId: it})) || [], [video, image, mediaTypesFoo]);\n\n\t\t\n\tconst label = image.find(it => setId === it.folderId)?.label || '';\n\n\treturn <WraperList arr={arr} label={label} mediaTypesFoo={mediaTypesFoo} />;\n};\n\nexport default MediaList;\n","import {MediaEnumFile, type MediaTypeFile, FormatMedia} from '../types/types-main';\n\nexport const wraperMediaParams = (link: string) => {\n\tswitch (link) {\n\t\tcase 'photo-list':\n\t\t\treturn {title: 'photo', tag: MediaEnumFile.PHOTO};\n\t\tcase 'video-list':\n\t\t\treturn {title: 'video', tag: MediaEnumFile.VIDEO};\n\t\tdefault:\n\t\t\treturn {title: 'photo', tag: MediaEnumFile.PHOTO};\n\t}\n};\n\nexport const wraperMediaListParams = (\n\tkey: string,\n): {title: string; buttonTitle: string; tag: MediaTypeFile} => {\n\tswitch (key) {\n\t\tcase 'photo-list':\n\t\t\treturn {\n\t\t\t\ttitle: 'photo',\n\t\t\t\tbuttonTitle: 'open full',\n\t\t\t\ttag: MediaEnumFile.PHOTO,\n\t\t\t};\n\t\tcase 'video-list':\n\t\t\treturn {\n\t\t\t\ttitle: 'video',\n\t\t\t\tbuttonTitle: 'play',\n\t\t\t\ttag: MediaEnumFile.VIDEO,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\ttitle: 'not found',\n\t\t\t\tbuttonTitle: 'not found',\n\t\t\t\ttag: MediaEnumFile.PHOTO,\n\t\t\t};\n\t}\n};\n\nexport const wraperMediaListSlick = (key: string): {tag: MediaTypeFile} => {\n\tswitch (key) {\n\t\tcase 'photo':\n\t\t\treturn {tag: MediaEnumFile.PHOTO};\n\t\tcase 'video':\n\t\t\treturn {tag: MediaEnumFile.VIDEO};\n\t\tdefault:\n\t\t\treturn {tag: MediaEnumFile.PHOTO};\n\t}\n};\n\nexport const dataUpload = (key: string): {format: FormatMedia; tag: MediaEnumFile.PHOTO | MediaEnumFile.VIDEO} => {\n\tswitch (key) {\n\t\tcase 'folder-photo':\n\t\t\treturn {format: FormatMedia.PHOTO, tag: MediaEnumFile.PHOTO};\n\t\tcase 'folder-video':\n\t\t\treturn {format: FormatMedia.VIDEO, tag: MediaEnumFile.VIDEO};\n\t\tdefault:\n\t\t\treturn {format: FormatMedia.PHOTO, tag: MediaEnumFile.PHOTO};\n\t}\n};\n","import {type DeviceType} from './../types/types-main';\n\nexport const randList = <T>(arr: T[], device: DeviceType): T[][] => {\n\t// Console.log(\"randList-->\",arr.length);\n\n\tif (arr.length === 0) {\n\t\treturn [];\n\t}\n\n\tif (arr.length === 1) {\n\t\treturn [[...arr]];\n\t}\n\n\tif (device !== 'pc') {\n\t\treturn arr.map(e => [e]);\n\t}\n\n\tconst tempArr: T[][] = [];\n\n\tfor (let i = 0; i < arr.length; i += 3) {\n\t\ttempArr.push([\n\t\t\t...arr.slice(i, i + 3 >= arr.length ? arr.length : i + 3),\n\t\t]);\n\t}\n\n\tif (tempArr[tempArr.length - 1].length === 1) {\n\t\ttempArr[tempArr.length - 1].unshift(tempArr[tempArr.length - 2].pop() as T);\n\t}\n\n\treturn tempArr;\n};\n"],"names":["LeftLine","_jsxs","width","height","viewBox","fill","xmlns","children","_jsx","d","stroke","strokeWidth","ChevronRight","MediaNavTitle","_ref","label","title","navigate","useNavigate","_Fragment","className","onClick","WraperList","arr","mediaTypesFoo","setId","useParams","location","useLocation","console","log","device","useContext","AppContext","Outlet","randList","map","arrItem","index","concat","length","item","style","backgroundImage","HREF","src","url","id","currentNumber","pathname","split","buttonTitle","MediaList","_image$find","_useContext","video","image","wraperMediaListParams","useMemo","_find","tag","MediaEnumFile","find","it","folderId","photoId","key","wraperMediaListSlick","dataUpload","format","FormatMedia","_toConsumableArray","e","tempArr","i","push","slice","unshift","pop"],"sourceRoot":""}